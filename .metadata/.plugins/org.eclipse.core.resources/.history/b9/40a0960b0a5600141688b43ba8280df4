package magServer;

import java.io.IOException;
import java.util.concurrent.locks.ReentrantLock;

class Controller {
	Tablet 							tablet;
	Magazine 						mag;
	WelcomeSocket 					mortarListener;
	WelcomeSocket 					tabletListener;
	public int 						ThreadCount;
	private final ReentrantLock		lock = new ReentrantLock();
	
	
	public void rotateMagazine(int num){
		for(int i = 0;i<num;i++){
			mag.rotate();
		}
		
		for(Tube tube : this.mag.tubes){
			tablet.send(tube.mortar.makeMessage());
		}
	}
	
	public void init() throws IOException {
		System.out.println("Initializing Tablet Object");
		this.tablet = new Tablet();
		System.out.println("Tablet Objected Initialized");
		System.out.println("Initializing Magazine Object");
		this.mag = new Magazine();
		System.out.println("Magazine Object Initialized");
		
		String mortarAddr = "192.168.1.1";
		String tabletAddr = "192.168.0.1";
		
		int timeoutCounter = 0;
		
		while (timeoutCounter < 3){
			try {
				System.out.println("Attempting to bind welcome socket to " + mortarAddr + " on port " + "4445");
				this.mortarListener = new WelcomeSocket();
				this.mortarListener.init(mortarAddr, 4445);
				System.out.println("Bound successfully!");
				timeoutCounter = 0;
				break;
			} catch (java.net.BindException e) {
				timeoutCounter ++;
				System.out.println("Couldn't bind to " + mortarAddr);
				System.out.println("Failed " + Integer.toString(timeoutCounter) + " times.");
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}
		
		if (timeoutCounter >= 3) {
			//TODO Implement code to kill the server neatly if the attempted bind times out 3 times
		}
		
		while (timeoutCounter < 3){
			try {
				System.out.println("Attempting to bind welcome socket to " + tabletAddr + " on port " + "4444");
				this.tabletListener = new WelcomeSocket();
				this.tabletListener.init(tabletAddr, 4444);
				System.out.println("Bound successfully!");
				break;
			} catch (java.net.BindException e) {
				timeoutCounter ++;
				System.out.println("Couldn't bind to " + tabletAddr);
				System.out.println("Failed " + Integer.toString(timeoutCounter) + " times.");
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}	
	}
	
	public void fire(){
		//sends fire signal
		rotateMagazine(1);
		}
	
	public void updateTablet(){ //sends data from magazine to tablet to send
		//Following line needs implementation
		//tablet.send(String "<list>");
		for(Tube tube : this.mag.tubes){
			tablet.send(tube.mortar.makeMessage());
			tablet.send("</list>\n");
		}
	}
	
	public void updateMortar(int ID, int fuze, String gps, String elev){  //takes message from Tablet to mortar, then updates actual mortar
		for (int i=0;i<mag.capacity;i++){
			if (mag.tubes.get(i).mortar.ID==ID){
				mag.tubes.get(i).mortar.updateSelf(fuze, gps, ID, elev);
				mag.tubes.get(i).mortar.sendSelf(mag.tubes.get(i).mortar.message);
			}
		}
	}
	
	
}
